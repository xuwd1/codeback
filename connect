#! /usr/bin/python3

import argparse
import subprocess
import os
import socket
import re
import pathlib

REVERSE_PORT_RANGE = range(56789, 57789)
DEFAULT_USERNAME = os.getlogin()
DEFAULT_MACHINE_NAME = socket.gethostname()

class PassedEnvVar:
    def __init__(self):
        self.env_var_name = None
        self.env_var_value = None
    
    def to_envvar_str(self):
        return f"{self.env_var_name}={self.env_var_value}"

# may not be needed
class CodeBackMachineName(PassedEnvVar):
    def __init__(self, name:str) -> None:
        self.env_var_name = "CODEBACK_MACHINE_NAME"
        self.env_var_value = name

    @staticmethod
    def get_default():
        return CodeBackMachineName(DEFAULT_MACHINE_NAME)


class CodeBackReversePort(PassedEnvVar):
    def __init__(self, port:int) -> None:
        self.env_var_name = "CODEBACK_REVERSE_PORT"
        self.env_var_value = str(port)

class CodeBackSourceAddr(PassedEnvVar):
    def __init__(self, addr) -> None:
        self.env_var_name = "CODEBACK_SOURCE_ADDR"
        self.env_var_value = addr

class CodeBackXAuthority(PassedEnvVar):
    def __init__(self, xauthority) -> None:
        self.env_var_name = "CODEBACK_XAUTHORITY"
        self.env_var_value = xauthority

    @staticmethod
    def get_default():
        return CodeBackXAuthority(os.environ.get("XAUTHORITY"))

class CodeBackXDisplay(PassedEnvVar):
    def __init__(self, xdisplay) -> None:
        self.env_var_name = "CODEBACK_XDISPLAY"
        self.env_var_value = xdisplay

    @staticmethod
    def get_default():
        return CodeBackXDisplay(os.environ.get("DISPLAY"))
    
class CodeBackWaylandDisplay(PassedEnvVar):
    def __init__(self, wayland_display) -> None:
        self.env_var_name = "CODEBACK_WAYLAND_DISPLAY"
        self.env_var_value = wayland_display

    @staticmethod
    def get_default():
        wayland_display_envvar = os.environ.get("WAYLAND_DISPLAY")
        if wayland_display_envvar is None:
            wayland_display_envvar = "NULL"
            
        return CodeBackWaylandDisplay(wayland_display_envvar)

class CodeBackLocalECDSAPubKey(PassedEnvVar):
    def __init__(self, pubkey_str) -> None:
        self.env_var_name = "CODEBACK_LOCAL_ECDSA_PUBKEY"
        self.env_var_value = pubkey_str

    def to_envvar_str(self):
        return f"{self.env_var_name}='{self.env_var_value}'"

class CodeBackLocalED25519PubKey(PassedEnvVar):
    def __init__(self, pubkey_str) -> None:
        self.env_var_name = "CODEBACK_LOCAL_ED25519_PUBKEY"
        self.env_var_value = pubkey_str
    
    def to_envvar_str(self):
        return f"{self.env_var_name}='{self.env_var_value}'"

class CodeBackLocalRSAPubKey(PassedEnvVar):
    def __init__(self, pubkey_str) -> None:
        self.env_var_name = "CODEBACK_LOCAL_RSA_PUBKEY"
        self.env_var_value = pubkey_str

    def to_envvar_str(self):
        return f"{self.env_var_name}='{self.env_var_value}'"

def allocate_remote_reverse_port(server_name, username, connection_port = None):
    ssh_netstat_tln_command = ["ssh", f"{username}@{server_name}", "netstat -tln"]
    if connection_port is not None:
        ssh_netstat_tln_command.insert(1, "-p")
        ssh_netstat_tln_command.insert(2, str(connection_port))
    result = subprocess.run(ssh_netstat_tln_command, capture_output=True, text=True)
    connection_text_list = result.stdout.split("\n")[2:-1]
    port_extract_re = re.compile(r"\d+\Z")
    used_ports = []
    for connection_text in connection_text_list:
        address_text = connection_text.split()[3]
        port = int(port_extract_re.search(address_text).group())
        used_ports.append(port)
    for port_candidate in REVERSE_PORT_RANGE:
        if port_candidate not in used_ports:
            # print(f"Port {port_candidate} is available")
            return port_candidate
        
def get_remote_shell(server_name, username, connection_port = None):
    ssh_connect_command = ["ssh", f"{username}@{server_name}", "echo $SHELL"]
    if connection_port is not None:
        ssh_connect_command.insert(1, "-p")
        ssh_connect_command.insert(2, str(connection_port))

    result = subprocess.run(ssh_connect_command, capture_output=True, text=True)
    remote_shell_path = result.stdout.strip()
    return remote_shell_path
    
def gather_local_ssh_pubkeys():
    ecdsa_pubkey_path = pathlib.Path("/etc/ssh/ssh_host_ecdsa_key.pub")
    ed25519_pubkey_path = pathlib.Path("/etc/ssh/ssh_host_ed25519_key.pub")
    rsa_pubkey_path = pathlib.Path("/etc/ssh/ssh_host_rsa_key.pub")

    ecdsa_pubkey = None
    ed25519_pubkey = None
    rsa_pubkey = None

    def trim_pubkey(pubkey_str):
        split_pubkey = pubkey_str.split()
        if len(split_pubkey) == 3:
            return " ".join([split_pubkey[0], split_pubkey[1]])
        else:
            return pubkey_str

    if ecdsa_pubkey_path.exists():
        with ecdsa_pubkey_path.open("r") as ecdsa_pubkey_file:
            ecdsa_pubkey_str = trim_pubkey(ecdsa_pubkey_file.read())
            ecdsa_pubkey = CodeBackLocalECDSAPubKey(ecdsa_pubkey_str)
    
    if ed25519_pubkey_path.exists():
        with ed25519_pubkey_path.open("r") as ed25519_pubkey_file:
            ed25519_pubkey_str = trim_pubkey(ed25519_pubkey_file.read())
            ed25519_pubkey = CodeBackLocalED25519PubKey(ed25519_pubkey_str)
    
    if rsa_pubkey_path.exists():
        with rsa_pubkey_path.open("r") as rsa_pubkey_file:
            rsa_pubkey_str = trim_pubkey(rsa_pubkey_file.read())
            rsa_pubkey = CodeBackLocalRSAPubKey(rsa_pubkey_str)
    
    return ecdsa_pubkey, ed25519_pubkey, rsa_pubkey

def connect_and_set_auto_reverse_port(server_name, username, connection_port = None):
    reverse_port = allocate_remote_reverse_port(server_name, username, connection_port)
    
    # get passed envvars
    envvar_codeback_reverse_port = CodeBackReversePort(reverse_port)
    envvar_codeback_source_addr = CodeBackSourceAddr(server_name)
    envvar_codeback_xauthority = CodeBackXAuthority.get_default()
    envvar_codeback_xdisplay = CodeBackXDisplay.get_default()
    envvar_codeback_wayland_display = CodeBackWaylandDisplay.get_default()
    envvar_pubkeys = gather_local_ssh_pubkeys()
    envvar_list = [
        envvar_codeback_reverse_port,
        envvar_codeback_source_addr,
        envvar_codeback_xauthority,
        envvar_codeback_xdisplay,
        envvar_codeback_wayland_display
    ] + [pubkey for pubkey in envvar_pubkeys if pubkey is not None]

    ssh_connect_command_ev = os.environ.copy()
    for envvar in envvar_list:
        ssh_connect_command_ev[envvar.env_var_name] = envvar.env_var_value

    ssh_connect_command = ["ssh", "-R", f"{reverse_port}:localhost:22" ,f"{username}@{server_name}"] + ["-oSendEnv={}".format(envvar.env_var_name) for envvar in envvar_list]
    # print(ssh_connect_command)

    # pubkey_envvars = gather_local_ssh_pubkeys()
    # ssh_execute_command = [pubkey.to_envvar_str() for pubkey in pubkey_envvars if pubkey is not None] + [get_remote_shell(server_name, username, connection_port)]
    # ssh_execute_command = " ".join(ssh_execute_command)
    # ssh_connect_command = ssh_connect_command + [ssh_execute_command]
    
    os.execvpe("ssh", ssh_connect_command, ssh_connect_command_ev)



if __name__ == "__main__":
    argparser = argparse.ArgumentParser(description="Connect to a remote server")
    argparser.add_argument("server_name", help="The server to connect to")
    argparser.add_argument("username", help="The username to use for the connection", default=DEFAULT_USERNAME, type=str, nargs="?")

    args = argparser.parse_args()
    server_name = args.server_name
    username = args.username

    connect_and_set_auto_reverse_port(server_name, username)

